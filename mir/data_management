class DataManagement(TenantAwareOrderedModelBase):
    """
    Meta class to define the data management policy and status for a model class
    """

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    content_type = models.ForeignKey(ContentType, null=True, on_delete=models.SET_NULL)
    index = models.PositiveSmallIntegerField(editable=False, db_index=True, default=0)
    allow_policy_change = models.BooleanField(default=True)

    POLICY_NOT_DEFINED = "not-defined"
    POLICY_MANUAL = "manual"
    POLICY_LINK = "linked"
    POLICY_REPLICATED = "replicated"
    POLICY_MANAGED = "managed"

    POLICIES = [
        (POLICY_NOT_DEFINED, _("Not defined")),
        (POLICY_MANUAL, _("Manual")),
        (POLICY_LINK, _("Link")),
        (POLICY_REPLICATED, _("Replicated")),
        (POLICY_MANAGED, _("Managed")),
    ]

    policy = models.CharField(max_length=32, choices=POLICIES, default=POLICY_NOT_DEFINED)

    POLICY_NOT_DEFINED = "not-defined"
    POLICY_MANUAL = "manual"
    POLICY_LINK = "linked"
    POLICY_REPLICATED = "replicated"
    POLICY_MANAGED = "managed"

    STATUSES = [
        (STATUS_NOT_DEFINED, _("Not defined")),
        (STATUS_PRODUCTION, _("Prototyping")),
        (STATUS_PRODUCTION, _("Development")),
        (STATUS_PRODUCTION, _("Testing")),
        (STATUS_PRODUCTION, _("Production")),
    ]

    status = models.CharField(max_length=32, choices=STATUSES, default=STATUS_NOT_DEFINED)

    order_field_name = 'index'

    @classmethod
    def is_valid_policy(cls, policy):
        for p in cls.POLICIES:
            if policy == p[0]:
                return True
        return False

    def get_entity_name(self):
        if self.content_type:
            cls = self.content_type.model_class()
            if cls:
                return cls._meta.verbose_name
        return _("Unknown entity")

    def __str__(self):
        cls = self.content_type.model_class()
        return cls._meta.verbose_name + ': ' + self.get_policy_display()

    class Meta:
        ordering = ('index',)
