from processpiper import ProcessMap, EventType, ActivityType, GatewayType

def diagram(routine, filename):

    actions = []

    for step in routine.steps(manager='unscoped').filter(skipped=False).order_by('index'):
        for activity in step.activities(manager='unscoped').filter(skipped=False).order_by('index'):
            for action in activity.actions(manager='unscoped').all():
                print(f"Appending {str(action.id)}")
                actions.append(action)

    pools = {}
    lanes = {}
    last_index = len(actions) - 1
    prev = None

    if len(actions) == 0:
        return None

    with ProcessMap(routine.name, colour_theme="BLUEMOUNTAIN") as process_map:
        for index, action in enumerate(actions):
            if action.organization_unit_id not in pools:
                ou_name = action.organization_unit.name if action.organization_unit else "Generic"
                pool = process_map.add_pool(ou_name)
                pools[action.organization_unit_id] = pool
                lanes[action.organization_unit_id] = {}
            else:
                pool = pools[action.organization_unit_id]

            if action.profile_id not in lanes[action.organization_unit_id]:
                lane = pool.add_lane(action.profile.name if action.profile else "")
                lanes[action.organization_unit_id][action.profile_id] = lane
            else:
                lane = lanes[action.organization_unit_id][action.profile_id]

            if index == 0:
                elem = lane.add_element(action.title, EventType.START)
            elif index == last_index:
                elem = lane.add_element(action.title, EventType.END)
            else:
                elem = lane.add_element(action.title, ActivityType.TASK)

            if prev:
                prev.connect(elem)

            prev = elem


        process_map.set_footer("Generated by USM tools https://usm.tools")
        process_map.draw()
        process_map.save(filename)

    return filename
